import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image

import cv2
import numpy as np

 # Load the rice image
img = cv2.imread('ricesam2.jpeg', 0)
img1 = cv2.imread('ricesam2.jpeg', 0)
 
# Remove salt-and-pepper noise using Median Blur
img_blur = cv2.medianBlur(img, 25)

# Apply Adaptive Thresholding to isolate rice grains
thresh = cv2.adaptiveThreshold(img_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 21, 2)

def display_image(image):
    image = Image.fromarray(image)
    image = image.resize((400, 400), Image.ANTIALIAS)
    img_tk = ImageTk.PhotoImage(image)
    image_label.configure(image=img_tk)
    image_label.image = img_tk

def display_original():
    display_image(img)

def display_blurred():
    display_image(img_blur)
    
def display_thresholded():
    display_image(thresh)

def display_highlighted():
    display_image(img1)

def analyze_rice():
  
    # Find contours of the individual rice grains
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Calculate the length of each rice grain
    lengths = []
    for contour in contours:
        length = cv2.arcLength(contour, True)
        lengths.append(length)

    # Find the smallest rice grain
    smallest_length = min(lengths)

    # Find the largest rice grain
    largest_length = max(lengths)
    
    # Draw a rectangle around the smallest rice grain
    for contour in contours:
        length = cv2.arcLength(contour, True)
        if length == smallest_length:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(img1, (x, y), (x+w, y+h), (0, 0, 255), 2)
            cv2.drawContours(img1, contour, -1, (0, 255, 0), 2)

    # Find the centroid of the smallest rice grain
    for contour in contours:
        length = cv2.arcLength(contour, True)
        if length == smallest_length:
            M = cv2.moments(contour)
            cx = int(M["m10"] / M["m00"])
            cy = int(M["m01"] / M["m00"])

    # Draw a rectangle around the largest rice grain
    for contour in contours:
        length = cv2.arcLength(contour, True)
        if length == largest_length:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(img1, (x, y), (x+w, y+h), (0, 0, 255), 2)
            cv2.drawContours(img1, contour, -1, (0, 255, 0), 2)

    # Find the centroid of the largest rice grain
    for contour in contours:
        length = cv2.arcLength(contour, True)
        if length == largest_length:
            M = cv2.moments(contour)
            cx = int(M["m10"] / M["m00"])
            cy = int(M["m01"] / M["m00"])

    # Add text to the image with the centroid coordinates
    text = "Number of rice grains: " + str(len(contours)) 
    text1 = "Smallest length: " + str(round(smallest_length, 2)) 
    text2 = "Largest length: " + str(round(largest_length, 2))
    # text2 = " Results generated by: rohaAreej"
    cv2.putText(img1, text, (cx - 290, cy - 260), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    cv2.putText(img1, text1, (cx - 290, cy - 240), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    cv2.putText(img1, text2, (cx - 290, cy - 220), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    
    # Display the results in a message box
    result_message = "Number of rice grains: {}\n\n".format(len(contours))
    result_message += "Lengths of rice grains: {}\n\n".format(lengths)
    result_message += "Smallest rice grain length: {}".format(smallest_length)
    result_message += "Largest rice grain length: {}".format(largest_length)
    messagebox.showinfo("Rice Grain Analysis Results", result_message)

    # Display the original image
    cv2.imshow("Grey Image", img)

    # Display the blurred image
    cv2.imshow("Blurred Image", img_blur)

    # Display the thresholded image
    cv2.imshow("Thresholded Image", thresh)

    # Display the image with the smallest and largest rice grain highlighted
    cv2.imshow("Rice Image", img1)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

window = tk.Tk()
window.title("Rice Grain Analysis")
window.configure(bg="#25383C")
window.geometry("900x700")
title_font = ("Arial", 20, "bold")
label_font = ("Arial", 12)
image = Image.open("ricesam2.jpeg")
image = image.resize((400, 400), Image.ANTIALIAS)
img_tk = ImageTk.PhotoImage(image)

image_label = tk.Label(window, image=img_tk)
image_label.pack(pady=20)

button_frame = tk.Frame(window)
button_frame.pack()

original_button = tk.Button(button_frame, text="Grey Image", command=display_original, font=label_font, bg="#2B3856", fg="white")
original_button.pack(side="left", padx=10, pady=10)

blurred_button = tk.Button(button_frame, text="Blurred Image", command=display_blurred, font=label_font, bg="#2B3856", fg="white")
blurred_button.pack(side="left", padx=10, pady=10)

thresholded_button = tk.Button(button_frame, text="Thresholded Image", command=display_thresholded, font=label_font, bg="#2B3856", fg="white")
thresholded_button.pack(side="left", padx=10, pady=10)

# highlighted_button = tk.Button(button_frame, text="Highlighted Image", command=display_highlighted, font=label_font, bg="#2B3856", fg="white")
# highlighted_button.pack(side="left", padx=10, pady=10)

analyze_button = tk.Button(window, text="Analyze Rice Grains", command=analyze_rice, font=title_font, bg="#FF0000", fg="white", padx=20, pady=10)
analyze_button.pack(pady=10)
footer_label = tk.Label(window, text="Results generated by: rohaAreej", font=label_font)
footer_label.pack(side="bottom", pady=10)

window.mainloop()